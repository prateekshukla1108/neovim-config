#!/bin/bash

# Function to validate project name
validate_project_name() {
    local name="$1"
    if [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "Invalid project name. Use only alphanumeric characters, underscores, and hyphens."
        return 1
    fi
    return 0
}

# Prompt for programming language
echo "Select programming language:"
echo "1. C"
echo "2. C++"
echo "3. Python"
echo "4. Rust"
read -p "Enter your choice (1-4): " lang_choice

# Map choice to language
case $lang_choice in
    1) language="c" ;;
    2) language="cpp" ;;
    3) language="python" ;;
    4) language="rust" ;;
    *) 
        echo "Invalid language choice"
        exit 1
        ;;
esac

# Prompt for project name with validation
while true; do
    read -p "Enter project name: " project_name
    
    if validate_project_name "$project_name"; then
        break
    fi
done

# Create project directory
project_path="/home/$USER/projects/$language/$project_name"

# Check if project directory already exists
if [ -d "$project_path" ]; then
    read -p "Project directory already exists. Overwrite? (y/n): " overwrite
    if [[ "$overwrite" != "y" ]]; then
        echo "Project creation cancelled."
        exit 1
    fi
fi

# Create project directory
mkdir -p "$project_path"

# Initialize project based on language
case $language in
    c)
        # Create a basic C project structure
        touch "$project_path/main.c"
        touch "$project_path/Makefile"
        cat << EOF > "$project_path/main.c"
#include <stdio.h>

int main() {
    printf("Hello, World!\n");
    return 0;
}
EOF
        ;;
    cpp)
        # Create a basic C++ project structure
        touch "$project_path/main.cpp"
        touch "$project_path/CMakeLists.txt"
        cat << EOF > "$project_path/main.cpp"
#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
EOF
        ;;
    python)
        # Create a basic Python project structure
        touch "$project_path/main.py"
        touch "$project_path/requirements.txt"
        cat << EOF > "$project_path/main.py"
def main():
    print("Hello, World!")

if __name__ == "__main__":
    main()
EOF
        ;;
    rust)
        # Use cargo to create a new Rust project
        cd "$project_path"
        cargo new "$project_name"
        cd "$project_name"
        ;;
esac

# Initialize git repository
cd "$project_path"
git init

# Create README
echo "# $project_name" > README.md

# Open nvim in the new project directory
nvim .

